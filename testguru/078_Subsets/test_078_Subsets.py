import pytest

from solution import Solution


class TestSolution:
    def test_subsets(self):
        # Test case where nums is empty.
        s = Solution()
        nums = []
        assert s.subsets(nums) == [[]]
        
        # Test case where nums has only one element.
        nums = [1]
        result = [[], [1]]
        assert s.subsets(nums) == result
        
        # Test case where nums has two elements.
        nums = [1, 2]
        result = [[], [1], [2], [1, 2]]
        assert s.subsets(nums) == result
        
        # Test case where nums has three elements.
        nums = [1, 2, 3]
        result = [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]
        assert s.subsets(nums) == result
        
        # Test case where nums has duplicate elements.
        nums = [1, 2, 2]
        result = [[], [1], [2], [1, 2], [2, 2], [1, 2, 2]]
        assert s.subsets(nums) == result
        
        # Test case where nums has negative elements.
        nums = [-1, 2, -3]
        result = [[], [-3], [-1], [-1, -3], [2], [2, -3], [2, -1], [2, -1, -3]]
        assert s.subsets(nums) == result
        
        # Test case where nums has all the same elements.
        nums = [3, 3, 3]
        result = [[], [3], [3, 3], [3, 3, 3]]
        assert s.subsets(nums) == result
        
        # Test case where nums has a large number of elements.
        nums = list(range(10))
        result = [[], [0], [1], [0, 1], [2], [0, 2], [1, 2], [0, 1, 2], [3], [0, 3], [1, 3], [0, 1, 3], [2, 3], [0, 2, 3], [1, 2, 3], [0, 1, 2, 3], [4], [0, 4], [1, 4], [0, 1, 4], [2, 4], [0, 2, 4], [1, 2, 4], [0, 1, 2, 4], [3, 4], [0, 3, 4], [1, 3, 4],
        [0, 1, 3, 4], [2, 3, 4], [0, 2, 3, 4], [1, 2, 3, 4], [0, 1, 2, 3, 4], [5], [0, 5], [1, 5], [0, 1, 5], [2, 5], [0, 2, 5], [1, 2, 5], [0, 1, 2, 5], [3, 5], [0, 3, 5], [1, 3, 5], [0, 1, 3, 5], [2, 3, 5], [0, 2, 3, 5], [1, 2, 3, 5], [0, 1, 2, 3, 5], [4, 5],
        [0, 4, 5], [1, 4, 5], [0, 1, 4, 5], [2, 4, 5], [0, 2, 4, 5], [1, 2, 4, 5], [0, 1, 2, 4, 5], [3, 4, 5], [0, 3, 4, 5], [1, 3, 4, 5], [0, 1, 3, 4, 5], [2, 3, 4, 5], [0, 2, 3, 4, 5], [1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], [6], [0, 6], [1, 6], [0, 1, 6], [2, 6], [0, 2, 6], [1, 2, 6], [0, 1, 2, 6], [3, 6],
        [0, 3, 6], [1, 3, 6], [0, 1, 3, 6], [2, 3, 6], [0, 2, 3, 6], [1, 2, 3, 6], [0, 1, 2, 3, 6], [4, 6], [0, 4, 6], [1, 4, 6], [0, 1, 4, 6], [2, 4, 6], [0, 2, 4, 6], [1, 2, 4, 6], [0, 1, 2, 4, 6], [3, 4, 6], [0, 3, 4, 6], [1, 3, 4, 6], [0, 1, 3, 4, 6], [2, 3, 4, 6],
        [0, 2, 3, 4, 6], [1, 2, 3, 4, 6], [0, 1, 2, 3, 4, 6], [5, 6], [0, 5, 6], [1, 5, 6], [0, 1, 5, 6], [2, 5, 6], [0, 2, 5, 6], [1, 2, 5, 6], [0, 1, 2, 5, 6], [3, 5, 6], [0, 3, 5, 6], [1, 3, 5, 6], [0, 1, 3, 5, 6], [2, 3, 5, 6], [0, 2, 3, 5, 6], [1, 2, 3, 5, 6],
        [0, 1, 2, 3, 5, 6], [4, 5, 6], [0, 4, 5, 6], [1, 4, 5, 6], [0, 1, 4, 5, 6], [2, 4, 5, 6], [0, 2, 4, 5, 6], [1, 2, 4, 5, 6], [0, 1, 2, 4, 5, 6], [3, 4, 5, 6], [0, 3, 4, 5, 6], [1, 3, 4, 5, 6], [0, 1, 3, 4, 5, 6], [2, 3, 4, 5, 6], [0, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6], [7],
        [0, 7], [1, 7], [0, 1, 7], [2, 7], [0, 2, 7], [1, 2, 7], [0, 1, 2, 7], [3, 7], [0, 3, 7], [1, 3, 7], [0, 1, 3, 7], [2, 3, 7], [0, 2, 3, 7], [1, 2, 3, 7], [0, 1, 2, 3, 7], [4, 7], [0, 4, 7], [1, 4, 7], [0, 1, 4, 7], [2, 4, 7], [0, 2, 4, 7], [1, 2, 4, 7], [0, 1, 2, 4, 7],
        [3, 4, 7], [0, 3, 4, 7], [1, 3, 4, 7], [0, 1, 3, 4, 7], [2, 3, 4, 7], [0, 2, 3, 4, 7], [1, 2, 3, 4, 7], [0, 1, 2, 3, 4, 7], [5, 7], [0, 5, 7], [1, 5, 7], [0, 1, 5, 7], [2, 5, 7], [0, 2, 5, 7], [1, 2, 5, 7], [0, 1, 2, 5, 7], [3, 5, 7], [0, 3, 5, 7], [1, 3, 5, 7],
        [0, 1, 3, 5, 7], [2, 3, 5, 7], [0, 2, 3, 5, 7], [1, 2, 3, 5, 7], [0, 1, 2, 3, 5, 7], [4, 5, 7], [0, 4, 5, 7], [1, 4, 5, 7], [0, 1, 4, 5, 7], [2, 4, 5, 7], [0, 2, 4, 5, 7], [1, 2, 4, 5, 7], [0, 1, 2, 4, 5, 7], [3, 4, 5, 7], [0, 3, 4, 5, 7], [1, 3, 4, 5, 7],
        [0, 1, 3, 4, 5, 7], [2, 3, 4, 5, 7], [0, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7], [6, 7], [0, 6, 7], [1, 6, 7], [0, 1, 6, 7], [2, 6, 7], [0, 2, 6, 7], [1, 2, 6, 7], [0, 1, 2, 6, 7], [3, 6, 7], [0, 3, 6, 7], [1, 3, 6, 7], [0, 1, 3, 6, 7],
        [2, 3, 6, 7], [0, 2, 3, 6, 7], [1, 2, 3, 6, 7], [0, 1, 2, 3, 6, 7], [4, 6, 7], [0, 4, 6, 7], [1, 4, 6, 7], [0, 1, 4, 6, 7], [2, 4, 6, 7], [0, 2, 4, 6, 7], [1, 2, 4, 6, 7], [0, 1, 2, 4, 6, 7], [3, 4, 6, 7], [0, 3, 4, 6, 7], [1, 3, 4, 6, 7], [0, 1, 3, 4, 6, 7],
        [2, 3, 4, 6, 7], [0, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 7], [0, 1, 2, 3, 4, 6, 7], [5, 6, 7], [0, 5, 6, 7], [1, 5, 6, 7], [0, 1, 5, 6, 7], [2, 5, 6, 7], [0, 2, 5, 6, 7], [1, 2, 5, 6, 7], [0, 1, 2, 5, 6, 7], [3, 5, 6, 7], [0, 3, 5, 6, 7], [1, 3, 5, 6, 7],
        [0, 1, 3, 5, 6, 7], [2, 3, 5, 6, 7], [0, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 7], [0, 1, 2, 3, 5, 6, 7], [4, 5, 6, 7], [0, 4, 5, 6, 7],[1, 4, 5, 6, 7], [0, 1, 4, 5, 6, 7], [2, 4, 5, 6, 7], [0, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 7], [0, 1, 2, 4, 5, 6, 7], [3, 4, 5, 6, 7], [0, 3, 4, 5, 6, 7],
        [1, 3, 4, 5, 6, 7], [0, 1, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7], [0, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6, 7]]
        assert s.subsets(nums) == result
        
        
if __name__ == "__main__":
    pytest.main()