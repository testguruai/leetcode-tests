============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.3.1, pluggy-1.0.0
rootdir: /data/sandeep/leetcode-master/.verifaiws
collected 10 items

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py .FFFFFFFFF [100%]

=================================== FAILURES ===================================
___________________________ test_single_valued_list ____________________________

    def test_single_valued_list():
        node_1 = ListNode(1)
>       assert Solution().isPalindrome(node_1) == True

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7f2a5e4e4e80>
head = <solution.ListNode object at 0x7f2a5e4e4e20>

    def isPalindrome(self, head):
        # p2 is 2 times faster than p3
        # p1 and pre is used to reverse the first half of the list
        # so when the first while is over
        # p1 is in the middle
        # p3 is in middle + 1
        # p2 is in the end
        if head is None:
            return True
        p1, p2 = head, head
>       p3, pre = p1.__next__, p1
E       AttributeError: 'ListNode' object has no attribute '__next__'. Did you mean: '__ne__'?

234_Palindrome_Linked_List/solution.py:36: AttributeError
________________________ test_two_valued_list_different ________________________

    def test_two_valued_list_different():
        node_1 = ListNode(1)
        node_2 = ListNode(2)
        node_1.next = node_2
>       assert Solution().isPalindrome(node_1) == False

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7f2a5e32c880>
head = <solution.ListNode object at 0x7f2a5e32ca60>

    def isPalindrome(self, head):
        # p2 is 2 times faster than p3
        # p1 and pre is used to reverse the first half of the list
        # so when the first while is over
        # p1 is in the middle
        # p3 is in middle + 1
        # p2 is in the end
        if head is None:
            return True
        p1, p2 = head, head
>       p3, pre = p1.__next__, p1
E       AttributeError: 'ListNode' object has no attribute '__next__'. Did you mean: '__ne__'?

234_Palindrome_Linked_List/solution.py:36: AttributeError
__________________________ test_two_valued_list_same ___________________________

    def test_two_valued_list_same():
        node_1 = ListNode(1)
        node_2 = ListNode(1)
        node_1.next = node_2
>       assert Solution().isPalindrome(node_1) == True

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7f2a5e32b700>
head = <solution.ListNode object at 0x7f2a5e32b8e0>

    def isPalindrome(self, head):
        # p2 is 2 times faster than p3
        # p1 and pre is used to reverse the first half of the list
        # so when the first while is over
        # p1 is in the middle
        # p3 is in middle + 1
        # p2 is in the end
        if head is None:
            return True
        p1, p2 = head, head
>       p3, pre = p1.__next__, p1
E       AttributeError: 'ListNode' object has no attribute '__next__'. Did you mean: '__ne__'?

234_Palindrome_Linked_List/solution.py:36: AttributeError
______________________ test_three_valued_list_palindrome _______________________

    def test_three_valued_list_palindrome():
        node_1 = ListNode(1)
        node_2 = ListNode(2)
        node_3 = ListNode(1)
        node_1.next = node_2
        node_2.next = node_3
>       assert Solution().isPalindrome(node_1) == True

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7f2a5e4e63e0>
head = <solution.ListNode object at 0x7f2a5e4e6350>

    def isPalindrome(self, head):
        # p2 is 2 times faster than p3
        # p1 and pre is used to reverse the first half of the list
        # so when the first while is over
        # p1 is in the middle
        # p3 is in middle + 1
        # p2 is in the end
        if head is None:
            return True
        p1, p2 = head, head
>       p3, pre = p1.__next__, p1
E       AttributeError: 'ListNode' object has no attribute '__next__'. Did you mean: '__ne__'?

234_Palindrome_Linked_List/solution.py:36: AttributeError
____________________ test_three_valued_list_not_palindrome _____________________

    def test_three_valued_list_not_palindrome():
        node_1 = ListNode(1)
        node_2 = ListNode(2)
        node_3 = ListNode(3)
        node_1.next = node_2
        node_2.next = node_3
>       assert Solution().isPalindrome(node_1) == False

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7f2a5e32cac0>
head = <solution.ListNode object at 0x7f2a5e32c040>

    def isPalindrome(self, head):
        # p2 is 2 times faster than p3
        # p1 and pre is used to reverse the first half of the list
        # so when the first while is over
        # p1 is in the middle
        # p3 is in middle + 1
        # p2 is in the end
        if head is None:
            return True
        p1, p2 = head, head
>       p3, pre = p1.__next__, p1
E       AttributeError: 'ListNode' object has no attribute '__next__'. Did you mean: '__ne__'?

234_Palindrome_Linked_List/solution.py:36: AttributeError
_______________________ test_four_valued_list_palindrome _______________________

    def test_four_valued_list_palindrome():
        node_1 = ListNode(1)
        node_2 = ListNode(2)
        node_3 = ListNode(2)
        node_4 = ListNode(1)
        node_1.next = node_2
        node_2.next = node_3
        node_3.next = node_4
>       assert Solution().isPalindrome(node_1) == True

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7f2a5e329930>
head = <solution.ListNode object at 0x7f2a5e32b580>

    def isPalindrome(self, head):
        # p2 is 2 times faster than p3
        # p1 and pre is used to reverse the first half of the list
        # so when the first while is over
        # p1 is in the middle
        # p3 is in middle + 1
        # p2 is in the end
        if head is None:
            return True
        p1, p2 = head, head
>       p3, pre = p1.__next__, p1
E       AttributeError: 'ListNode' object has no attribute '__next__'. Did you mean: '__ne__'?

234_Palindrome_Linked_List/solution.py:36: AttributeError
_____________________ test_four_valued_list_not_palindrome _____________________

    def test_four_valued_list_not_palindrome():
        node_1 = ListNode(1)
        node_2 = ListNode(2)
        node_3 = ListNode(3)
        node_4 = ListNode(2)
        node_1.next = node_2
        node_2.next = node_3
        node_3.next = node_4
>       assert Solution().isPalindrome(node_1) == False

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7f2a5e4e7910>
head = <solution.ListNode object at 0x7f2a5e4e7a00>

    def isPalindrome(self, head):
        # p2 is 2 times faster than p3
        # p1 and pre is used to reverse the first half of the list
        # so when the first while is over
        # p1 is in the middle
        # p3 is in middle + 1
        # p2 is in the end
        if head is None:
            return True
        p1, p2 = head, head
>       p3, pre = p1.__next__, p1
E       AttributeError: 'ListNode' object has no attribute '__next__'. Did you mean: '__ne__'?

234_Palindrome_Linked_List/solution.py:36: AttributeError
_______________________ test_five_valued_list_palindrome _______________________

    def test_five_valued_list_palindrome():
        node_1 = ListNode(1)
        node_2 = ListNode(2)
        node_3 = ListNode(3)
        node_4 = ListNode(2)
        node_5 = ListNode(1)
        node_1.next = node_2
        node_2.next = node_3
        node_3.next = node_4
        node_4.next = node_5
>       assert Solution().isPalindrome(node_1) == True

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7f2a5e32e3e0>
head = <solution.ListNode object at 0x7f2a5e32ecb0>

    def isPalindrome(self, head):
        # p2 is 2 times faster than p3
        # p1 and pre is used to reverse the first half of the list
        # so when the first while is over
        # p1 is in the middle
        # p3 is in middle + 1
        # p2 is in the end
        if head is None:
            return True
        p1, p2 = head, head
>       p3, pre = p1.__next__, p1
E       AttributeError: 'ListNode' object has no attribute '__next__'. Did you mean: '__ne__'?

234_Palindrome_Linked_List/solution.py:36: AttributeError
_____________________ test_five_valued_list_not_palindrome _____________________

    def test_five_valued_list_not_palindrome():
        node_1 = ListNode(1)
        node_2 = ListNode(2)
        node_3 = ListNode(3)
        node_4 = ListNode(4)
        node_5 = ListNode(5)
        node_1.next = node_2
        node_2.next = node_3
        node_3.next = node_4
        node_4.next = node_5
>       assert Solution().isPalindrome(node_1) == False

234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7f2a5e4e6b90>
head = <solution.ListNode object at 0x7f2a5e4e6bf0>

    def isPalindrome(self, head):
        # p2 is 2 times faster than p3
        # p1 and pre is used to reverse the first half of the list
        # so when the first while is over
        # p1 is in the middle
        # p3 is in middle + 1
        # p2 is in the end
        if head is None:
            return True
        p1, p2 = head, head
>       p3, pre = p1.__next__, p1
E       AttributeError: 'ListNode' object has no attribute '__next__'. Did you mean: '__ne__'?

234_Palindrome_Linked_List/solution.py:36: AttributeError
=========================== short test summary info ============================
FAILED 234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py::test_single_valued_list
FAILED 234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py::test_two_valued_list_different
FAILED 234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py::test_two_valued_list_same
FAILED 234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py::test_three_valued_list_palindrome
FAILED 234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py::test_three_valued_list_not_palindrome
FAILED 234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py::test_four_valued_list_palindrome
FAILED 234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py::test_four_valued_list_not_palindrome
FAILED 234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py::test_five_valued_list_palindrome
FAILED 234_Palindrome_Linked_List/test_234_Palindrome_Linked_List.py::test_five_valued_list_not_palindrome
========================= 9 failed, 1 passed in 0.04s ==========================
