============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.3.1, pluggy-1.0.0
rootdir: /data/sandeep/leetcode-master/.verifaiws
collected 5 items

081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py F [ 20%]
FFFF                                                                     [100%]

=================================== FAILURES ===================================
__________________________ test_search[nums0-0-True] ___________________________

nums = [2, 5, 6, 0, 0, 1, ...], target = 0, expected = True

    @pytest.mark.parametrize("nums, target, expected", test_cases)
    def test_search(nums, target, expected):
        sol = Solution()
>       assert sol.search(nums, target) == expected

081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
081_Search_in_Rotated_Sorted_Array_II/solution.py:35: in search
    return get(0, len(nums) - 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

start = 0, end = 6

    def get(start, end):
        if start > end:
            return False
        mid = (start + end) / 2
        # handle duplicate
>       while mid < end and nums[mid + 1] == nums[mid]:
E       TypeError: list indices must be integers or slices, not float

081_Search_in_Rotated_Sorted_Array_II/solution.py:13: TypeError
__________________________ test_search[nums1-3-False] __________________________

nums = [2, 5, 6, 0, 0, 1, ...], target = 3, expected = False

    @pytest.mark.parametrize("nums, target, expected", test_cases)
    def test_search(nums, target, expected):
        sol = Solution()
>       assert sol.search(nums, target) == expected

081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
081_Search_in_Rotated_Sorted_Array_II/solution.py:35: in search
    return get(0, len(nums) - 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

start = 0, end = 6

    def get(start, end):
        if start > end:
            return False
        mid = (start + end) / 2
        # handle duplicate
>       while mid < end and nums[mid + 1] == nums[mid]:
E       TypeError: list indices must be integers or slices, not float

081_Search_in_Rotated_Sorted_Array_II/solution.py:13: TypeError
__________________________ test_search[nums2-0-False] __________________________

nums = [1], target = 0, expected = False

    @pytest.mark.parametrize("nums, target, expected", test_cases)
    def test_search(nums, target, expected):
        sol = Solution()
>       assert sol.search(nums, target) == expected

081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
081_Search_in_Rotated_Sorted_Array_II/solution.py:35: in search
    return get(0, len(nums) - 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

start = 0, end = 0

    def get(start, end):
        if start > end:
            return False
        mid = (start + end) / 2
        # handle duplicate
        while mid < end and nums[mid + 1] == nums[mid]:
            mid += 1
        while start < mid and nums[start + 1] == nums[start]:
            start += 1
>       if nums[mid] == target:
E       TypeError: list indices must be integers or slices, not float

081_Search_in_Rotated_Sorted_Array_II/solution.py:17: TypeError
__________________________ test_search[nums3-1-True] ___________________________

nums = [1], target = 1, expected = True

    @pytest.mark.parametrize("nums, target, expected", test_cases)
    def test_search(nums, target, expected):
        sol = Solution()
>       assert sol.search(nums, target) == expected

081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
081_Search_in_Rotated_Sorted_Array_II/solution.py:35: in search
    return get(0, len(nums) - 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

start = 0, end = 0

    def get(start, end):
        if start > end:
            return False
        mid = (start + end) / 2
        # handle duplicate
        while mid < end and nums[mid + 1] == nums[mid]:
            mid += 1
        while start < mid and nums[start + 1] == nums[start]:
            start += 1
>       if nums[mid] == target:
E       TypeError: list indices must be integers or slices, not float

081_Search_in_Rotated_Sorted_Array_II/solution.py:17: TypeError
__________________________ test_search[nums4-3-True] ___________________________

nums = [1, 3, 1, 1, 1], target = 3, expected = True

    @pytest.mark.parametrize("nums, target, expected", test_cases)
    def test_search(nums, target, expected):
        sol = Solution()
>       assert sol.search(nums, target) == expected

081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
081_Search_in_Rotated_Sorted_Array_II/solution.py:35: in search
    return get(0, len(nums) - 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

start = 0, end = 4

    def get(start, end):
        if start > end:
            return False
        mid = (start + end) / 2
        # handle duplicate
>       while mid < end and nums[mid + 1] == nums[mid]:
E       TypeError: list indices must be integers or slices, not float

081_Search_in_Rotated_Sorted_Array_II/solution.py:13: TypeError
=========================== short test summary info ============================
FAILED 081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py::test_search[nums0-0-True]
FAILED 081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py::test_search[nums1-3-False]
FAILED 081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py::test_search[nums2-0-False]
FAILED 081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py::test_search[nums3-1-True]
FAILED 081_Search_in_Rotated_Sorted_Array_II/test_081_Search_in_Rotated_Sorted_Array_II.py::test_search[nums4-3-True]
============================== 5 failed in 0.02s ===============================
