============================= test session starts ==============================
platform linux -- Python 3.10.6, pytest-7.3.1, pluggy-1.0.0
rootdir: /data/sandeep/leetcode-master/.verifaiws
collected 5 items

267_Palindrome_Permutation_II/test_267_Palindrome_Permutation_II.py FF.. [ 80%]
.                                                                        [100%]

=================================== FAILURES ===================================
_______________ test_generatePalindromes_returns_correct_output ________________

    def test_generatePalindromes_returns_correct_output():
        s = "aab"
        expected_output = ['aba', 'aab', 'baa']
>       assert Solution().generatePalindromes(s) == expected_output

267_Palindrome_Permutation_II/test_267_Palindrome_Permutation_II.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7fada3230880>, s = 'aab'

    def generatePalindromes(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        dic = {}
        half = []
        res = []
        for c in s:
            dic[c] = dic.get(c, 0) + 1
        odd, even = 0, 0
        for c in dic:
            if dic[c] % 2 == 0:
                even += 1
            else:
                odd += 1
        if odd > 1:
            return []
        # generate half
        seed = []
        mid = ''
        for c in dic:
            if dic[c] % 2 == 1:
                mid = c
>           seed.extend([c] * (dic[c] / 2))
E           TypeError: can't multiply sequence by non-int of type 'float'

267_Palindrome_Permutation_II/solution.py:26: TypeError
_ test_generatePalindromes_returns_empty_list_if_odd_count_of_chars_greater_than_1 _

    def test_generatePalindromes_returns_empty_list_if_odd_count_of_chars_greater_than_1():
        s = "aabbcc"
>       assert Solution().generatePalindromes(s) == []

267_Palindrome_Permutation_II/test_267_Palindrome_Permutation_II.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <solution.Solution object at 0x7fada3233cd0>, s = 'aabbcc'

    def generatePalindromes(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        dic = {}
        half = []
        res = []
        for c in s:
            dic[c] = dic.get(c, 0) + 1
        odd, even = 0, 0
        for c in dic:
            if dic[c] % 2 == 0:
                even += 1
            else:
                odd += 1
        if odd > 1:
            return []
        # generate half
        seed = []
        mid = ''
        for c in dic:
            if dic[c] % 2 == 1:
                mid = c
>           seed.extend([c] * (dic[c] / 2))
E           TypeError: can't multiply sequence by non-int of type 'float'

267_Palindrome_Permutation_II/solution.py:26: TypeError
=========================== short test summary info ============================
FAILED 267_Palindrome_Permutation_II/test_267_Palindrome_Permutation_II.py::test_generatePalindromes_returns_correct_output
FAILED 267_Palindrome_Permutation_II/test_267_Palindrome_Permutation_II.py::test_generatePalindromes_returns_empty_list_if_odd_count_of_chars_greater_than_1
========================= 2 failed, 3 passed in 0.02s ==========================
